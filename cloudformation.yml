AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Snappy Media Manager

Parameters:
  CodeDeployBucketName:
    Type: String
    Description: The bucket name for code artifacts to deploy
    Default: '' # TODO: Temporary - REMOVE  ME

  ProcessorDeployKey:
    Type: String
    Description: The artifact key for the image processor lambda
    Default: '' # TODO: Temporary - REMOVE  ME

  ApiDeployKey:
    Type: String
    Description: The artifact key for the API lambda
    Default: '' # TODO: Temporary - REMOVE  ME

  LogRetentionDays:
    Type: Number
    Description: The number of days to retain logs. Defaults to 14.
    Default: 14

  UseCloudFront:
    Type: String
    Description: Whether or not to use CloudFront for the content bucket and web app
    AllowedValues: [ 'true', 'false' ]
    Default: 'true'

  # TODO: Cognito User Pool params
  # TODO: Website/frontend params

Conditions:
  ShouldCreateCloudFrontDistribution:
    !Equals [ !Ref UseCloudFront, 'true' ]

Outputs:
  UploadBucketName:
    Value: !Ref UploadBucket

  StorageBucketName:
    Value: !Ref StorageBucket

  AlbumTableName:
    Value: !Ref AlbumTable

  PhotoTableName:
    Value: !Ref PhotoTable

  ApiUrl:
    Value: !Sub https://${ServerlessApi}.execute-api.${AWS::Region}.amazonaws.com/
    Description: Base URL of the API Gateway

  # TODO: API/Cloudfront URLs
  # TODO: Congito

Resources:
  OriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: "snappy storage bucket OAI"

  UploadBucket:
    Type: AWS::S3::Bucket
    Properties:
      Tags:
        - Key: Purpose
          Value: Temporary storage for uploads
      NotificationConfiguration:
        QueueConfigurations:
          - Event: 's3:ObjectCreated:*'
            Queue: !GetAtt NewImageQueue.Arn

  StorageBucket:
    Type: AWS::S3::Bucket
    Properties:
      Tags:
        - Key: Purpose
          Value: Media storage

  StorageBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref StorageBucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              CanonicalUser: !GetAtt OriginAccessIdentity.S3CanonicalUserId
            Action:
              - s3:GetObject
            Resource: !Sub 'arn:${AWS::Partition}:s3:::${StorageBucket}/*'

            # TODO: Remove this when the CF restriction is figured out
          # - Effect: Allow
          #   Principal: '*'
          #   Action:
          #     - s3:GetObject
          #   Resource: !Sub 'arn:${AWS::Partition}:s3:::${StorageBucket}/*'

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Condition: ShouldCreateCloudFrontDistribution
    Properties:
      DistributionConfig:
        Enabled: 'true'
        CacheBehaviors:
          - PathPattern: '/media/'
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
            CachePolicyId: '658327ea-f89d-4fab-a63d-7e88639e58f6' # Id for CachingOptimized
            TargetOriginId: StorageBucketOrigin
            ForwardedValues:
              QueryString: 'false'
              Cookies:
                Forward: none
            ViewerProtocolPolicy: redirect-to-https
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          # See https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html for CachePolicyId details
          CachePolicyId: '658327ea-f89d-4fab-a63d-7e88639e58f6' # Id for CachingOptimized
          TargetOriginId: StorageBucketOrigin
          ForwardedValues:
            QueryString: 'false'
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https
        Origins:
          - Id: StorageBucketOrigin
            S3OriginConfig:
              OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${OriginAccessIdentity.Id}' # TODO: Should probably restrict access to s3 bucket
            DomainName: !GetAtt StorageBucket.DomainName

  AlbumTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: Slug
          AttributeType: S
      KeySchema:
        - AttributeName: Slug
          KeyType: HASH
      Tags:
        - Key: Purpose
          Value: Data storage
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - I3011 # Ignore update/delete policy warnings

  PhotoTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: AlbumSlug
          AttributeType: S
        - AttributeName: Id
          AttributeType: S
      KeySchema:
        - AttributeName: AlbumSlug
          KeyType: HASH
        - AttributeName: Id
          KeyType: RANGE
      Tags:
        - Key: Purpose
          Value: Data storage
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - I3011 # Ignore update/delete policy warnings

  # TODO: Configure/specify dead letter queue
  NewImageQueue:
    Type: AWS::SQS::Queue
    Properties:
      VisibilityTimeout: 300 # 5 minutes
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - I3011 # Ignore update/delete policy warnings
            - I3013 # Ignore explicit retention policy

  NewImageQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref NewImageQueue
      PolicyDocument:
        Version: 2012-10-17
        Id: S3Publish
        Statement:
          - Sid: S3PublishMessage
            Effect: Allow
            Principal:
              Service: 's3.amazonaws.com'
            Action:
              - 'SQS:SendMessage'
            Resource: !Sub ${NewImageQueue.Arn}
            Condition:
              ArnLike:
                'aws:SourceArn': !Sub '${UploadBucket.Arn}'

  NewImageWorkerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: 'lambda.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: sqs_rx
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'sqs:DeleteMessage*'
                  - 'sqs:GetQueueAttributes'
                  - 'sqs:GetQueueUrl'
                  - 'sqs:ListDeadLetterSourceQueues'
                  - 'sqs:ReceiveMessage'
                Resource: !Sub ${NewImageQueue.Arn}

              - Effect: Allow
                Action:
                  - 'sqs:ListQueues'
                Resource: !Sub 'arn:${AWS::Partition}:sqs:${AWS::Region}:${AWS::AccountId}:*'

        - PolicyName: logs
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - logs:*
                Resource: arn:aws:logs:*:*:* # TODO restrict

        - PolicyName: s3_fetch
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListBucket*
                Resource: !Sub ${UploadBucket.Arn}

              - Effect: Allow
                Action:
                  - s3:DeleteObject*
                  - s3:GetObject*
                Resource: !Sub ${UploadBucket.Arn}*

              - Effect: Allow
                Action:
                  - s3:PutObject*
                Resource: !Sub ${StorageBucket.Arn}*

        - PolicyName: dynamo
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:Batch*'
                  - 'dynamodb:DeleteItem'
                  - 'dynamodb:DescribeTable' # Not sure about this?
                  - 'dynamodb:GetItem'
                  - 'dynamodb:PutItem'
                  - 'dynamodb:Query'
                  - 'dynamodb:Scan'
                  - 'dynamodb:UpdateItem'
                Resource:
                  - !Sub ${AlbumTable.Arn}
                  - !Sub ${PhotoTable.Arn}

        - PolicyName: thumbnail_topic
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: sns:Publish
                Resource: !Ref ThumbnailWorkerTopic

  ImageProcessorLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${ImageProcessor}'
      RetentionInDays: !Ref LogRetentionDays
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - I3011 # Ignore update/delete policy warnings

  ImageProcessor:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: !Ref CodeDeployBucketName
        Key: !Ref ProcessorDeployKey
      Handler: Snappy.ImageProcessor::Snappy.ImageProcessor.NewImageHandler::FunctionHandler
      Role: !Sub ${NewImageWorkerRole.Arn}
      Runtime: dotnet6
      MemorySize: 256
      Timeout: 300
      Environment:
        Variables:
          StorageBucketName: !Ref StorageBucket
          NewImageQueueUrl: !Ref NewImageQueue
          ThumbnailWorkerTopicArn: !Ref ThumbnailWorkerTopic
          AlbumTableName: !Ref AlbumTable
          PhotoTableName: !Ref PhotoTable
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt NewImageQueue.Arn
            BatchSize: 1 # 10

  ThumbnailWorkerTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: ThumbnailGenerator
      # Subscription:
      #   - Endpoint: !GetAtt ThumbnailWorker.Arn
      #     Protocol: lambda

  ThumbnailWorkerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: logs
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - logs:*
                Resource: arn:aws:logs:*:*:* # TODO: Restrict logs

        - PolicyName: s3
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListBucket*
                Resource: !GetAtt StorageBucket.Arn

              - Effect: Allow
                Action:
                  - s3:GetObject*
                  - s3:PutObject*
                Resource: !Sub ${StorageBucket.Arn}/*

  ThumbnailWorker:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: !Ref CodeDeployBucketName
        Key: !Ref ProcessorDeployKey
      Handler: Snappy.ImageProcessor::Snappy.ImageProcessor.ResizeImageHandler::Handle
      Role: !GetAtt ThumbnailWorkerRole.Arn
      Runtime: dotnet6
      MemorySize: 512
      Timeout: 300
      Environment: {}
      Events:
        SNSEvent:
          Type: SNS
          Properties:
            Topic: !Ref ThumbnailWorkerTopic

  ThumbnailWorkerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${ThumbnailWorker}'
      RetentionInDays: !Ref LogRetentionDays
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - I3011 # Ignore update/delete policy warnings

  ApiProxyRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: 'lambda.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: logs
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - logs:*
                Resource: arn:aws:logs:*:*:* # TODO restrict

        - PolicyName: dynamo
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:Batch*'
                  - 'dynamodb:DeleteItem'
                  - 'dynamodb:DescribeTable'
                  - 'dynamodb:GetItem'
                  - 'dynamodb:PutItem'
                  - 'dynamodb:Query'
                  - 'dynamodb:Scan'
                  - 'dynamodb:UpdateItem'
                Resource:
                  - !Sub ${AlbumTable.Arn}
                  - !Sub ${PhotoTable.Arn}

  ServerlessApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      CorsConfiguration:
        # AllowOrigins:
        #   - !Sub 'https://${S3WebsiteStack.Outputs.CloudfrontEndpoint}'
        #   - !Sub 'https://${S3WebsiteStack.Outputs.FullDomain}'
        AllowHeaders:
          - '*'
        AllowMethods:
          - DELETE
          - GET
          - OPTIONS
          - POST
          - PUT
        ExposeHeaders:
          - '*'
        MaxAge: 600
        AllowCredentials: True

  ApiProxyFunction:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: dotnet6
      # Handler: Snappy.Api::Snappy.Api.LambdaEntryPoint::FunctionHandlerAsync
      Handler: Snappy.Api
      CodeUri:
        Bucket: !Ref CodeDeployBucketName
        Key: !Ref ApiDeployKey
      MemorySize: 256
      Timeout: 30
      Role: !GetAtt ApiProxyRole.Arn
      Environment:
        Variables:
          AWS__StorageBucketName: !Ref StorageBucket
          AWS__AlbumTableName: !Ref AlbumTable
          AWS__PhotoTableName: !Ref PhotoTable
          # AWS__CollectionTableName: !Ref CollectionTable
          # AWS__CloudfrontEndpoint: !Sub 'https://${S3WebsiteStack.Outputs.CloudfrontEndpoint}'
          # AWS__FrontendUrl: !Sub 'https://${S3WebsiteStack.Outputs.FullDomain}'
          # AWS__CognitoUrl: !If
          #   - ShouldCreateUserPool
          #   - !Sub https://cognito-idp.us-east-1.amazonaws.com/${UserPool}
          #   - !Sub https://cognito-idp.us-east-1.amazonaws.com/${UserPoolId}
          # AWS__CognitoApiClientId: !Ref UserPoolApiClient
          # AWS__ThumbnailWorkerTopicArn: !Ref ThumbnailWorkerTopic
      Events:
        ProxyResource:
          Type: HttpApi
          Properties:
            ApiId: !Ref ServerlessApi
            Path: '/{proxy+}'
            Method: ANY
        RootResource:
          Type: HttpApi
          Properties:
            ApiId: !Ref ServerlessApi
            Path: '/'
            Method: ANY

  ApiProxyFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${ApiProxyFunction}'
      RetentionInDays: !Ref LogRetentionDays
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - I3011 # Ignore update/delete policy warnings
